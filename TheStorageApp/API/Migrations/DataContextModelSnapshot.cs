// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheStorageApp.API.Data;

namespace TheStorageApp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReceiptTag", b =>
                {
                    b.Property<string>("ReceiptsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReceiptsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ReceiptTag");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c15f63ec-09c1-41e0-bfc2-17cc31690dc9",
                            Email = "system@email.com",
                            EmailConfirmed = false,
                            FirstName = "system",
                            LastName = "user",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RoleId = "28f0f34f-9425-4d43-8f2e-2afe9775d3e9",
                            SecurityStamp = "b5f70895-c011-4493-b792-c29fd3f513da",
                            TwoFactorEnabled = false,
                            UserName = "<SYSTEM>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "b1d73032-80fb-4388-a3b4-70143942d911",
                            Color = "555555",
                            CreatedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            CreatedOn = new DateTime(2021, 4, 27, 19, 49, 9, 235, DateTimeKind.Local).AddTicks(8293),
                            ModifiedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            ModifiedOn = new DateTime(2021, 4, 27, 19, 49, 9, 235, DateTimeKind.Local).AddTicks(8760),
                            Name = "<DEFAULT>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.LogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById1")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById1");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiptHolderId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ShopId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReceiptHolderId");

                    b.HasIndex("ShopId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ReceiptImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ReceiptImages");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GPSLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "23fdc902-8d97-468a-ad35-d3f8935ebec7",
                            Address = "",
                            CreatedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            CreatedOn = new DateTime(2021, 4, 27, 19, 49, 9, 251, DateTimeKind.Local).AddTicks(4266),
                            GPSLocation = "",
                            ModifiedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            ModifiedOn = new DateTime(2021, 4, 27, 19, 49, 9, 251, DateTimeKind.Local).AddTicks(4718),
                            Name = "<DEFAULT>",
                            Website = ""
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "eda3f35d-1f4e-4668-882e-499faf537265",
                            Color = "555555",
                            CreatedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            CreatedOn = new DateTime(2021, 4, 27, 19, 49, 9, 255, DateTimeKind.Local).AddTicks(7685),
                            ModifiedById = "d4f9f0d5-b3f2-4179-b3b3-6ede0b179642",
                            ModifiedOn = new DateTime(2021, 4, 27, 19, 49, 9, 255, DateTimeKind.Local).AddTicks(8129),
                            Name = "<DEFAULT>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "28f0f34f-9425-4d43-8f2e-2afe9775d3e9",
                            ConcurrencyStamp = "739f3b63-d958-43d7-b452-fe783030c7e8",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "c39512d1-4264-4efd-ba52-64f9d7b177ee",
                            ConcurrencyStamp = "e1b48499-bfef-4439-a723-1a55ee680d94",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = "883ebd7e-9e7f-4d44-a674-85e746f5505a",
                            ConcurrencyStamp = "477110c1-0ccd-45c4-8dd3-6eb9c125102e",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReceiptTag", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppRole", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Category", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByCategories")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByCategories")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("TheStorageApp.API.Models.Receipt", null)
                        .WithMany("Categories")
                        .HasForeignKey("ReceiptId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.LogEntry", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByLogEntries")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById1");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByReceipts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByReceipts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ReceiptHolder")
                        .WithMany("Receipts")
                        .HasForeignKey("ReceiptHolderId");

                    b.HasOne("TheStorageApp.API.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReceiptHolder");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ReceiptImage", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByReceiptImages")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.Receipt", "Receipt")
                        .WithMany("RecipetImages")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByReceiptImages")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Shop", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByShops")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByShops")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Tag", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByTags")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByTags")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.Navigation("CreatedByCategories");

                    b.Navigation("CreatedByLogEntries");

                    b.Navigation("CreatedByReceiptImages");

                    b.Navigation("CreatedByReceipts");

                    b.Navigation("CreatedByShops");

                    b.Navigation("CreatedByTags");

                    b.Navigation("ModifiedByCategories");

                    b.Navigation("ModifiedByReceiptImages");

                    b.Navigation("ModifiedByReceipts");

                    b.Navigation("ModifiedByShops");

                    b.Navigation("ModifiedByTags");

                    b.Navigation("Receipts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("RecipetImages");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
