// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheStorageApp.API.Data;

namespace TheStorageApp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210606095308_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("FieldModel", b =>
                {
                    b.Property<string>("ModelFieldsLookupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ModelLookupFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ModelFieldsLookupId", "ModelLookupFieldsId");

                    b.HasIndex("ModelLookupFieldsId");

                    b.ToTable("FieldModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReceiptTag", b =>
                {
                    b.Property<string>("ReceiptsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReceiptsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ReceiptTag");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f51ad62-b75f-48da-b4fb-c8c52ad081b0",
                            Email = "system@email.com",
                            EmailConfirmed = false,
                            FirstName = "system",
                            LastName = "user",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RoleId = "680c60e2-efd5-40d1-ba1f-dd80d9c7c658",
                            SecurityStamp = "adc30969-5959-478b-9f55-65f4563d5c64",
                            TwoFactorEnabled = false,
                            UserName = "<SYSTEM>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "4b135cb7-62d1-4bc6-b2ed-7ab98afca532",
                            Color = "555555",
                            CreatedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            CreatedOn = new DateTime(2021, 6, 6, 11, 53, 7, 679, DateTimeKind.Local).AddTicks(2955),
                            ModifiedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            ModifiedOn = new DateTime(2021, 6, 6, 11, 53, 7, 679, DateTimeKind.Local).AddTicks(3438),
                            Name = "<DEFAULT>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Field", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("DataTypeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxSize")
                        .HasColumnType("int");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<string>("ModelId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Requiered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Unique")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModelId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.LogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById1")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById1");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("LargeImage")
                        .HasColumnType("longblob");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PluralName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("SmallImage")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ModelRelationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RelatedFieldId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RelatedModelId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SorceModelId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SourceFieldId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RelatedModelId");

                    b.HasIndex("SorceModelId");

                    b.ToTable("ModelRelationship");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiptHolderId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ShopId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReceiptHolderId");

                    b.HasIndex("ShopId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ReceiptImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ReceiptImages");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GPSLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "b64d0608-9d44-47a0-9c31-af8aef5ca4d3",
                            Address = "",
                            CreatedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            CreatedOn = new DateTime(2021, 6, 6, 11, 53, 7, 694, DateTimeKind.Local).AddTicks(9093),
                            GPSLocation = "",
                            ModifiedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            ModifiedOn = new DateTime(2021, 6, 6, 11, 53, 7, 694, DateTimeKind.Local).AddTicks(9538),
                            Name = "<DEFAULT>",
                            Website = ""
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "98a8c220-6d22-4391-9cba-d93f77fb0456",
                            Color = "555555",
                            CreatedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            CreatedOn = new DateTime(2021, 6, 6, 11, 53, 7, 699, DateTimeKind.Local).AddTicks(5249),
                            ModifiedById = "648d5765-c969-471a-b11f-fb3c6b15f7ab",
                            ModifiedOn = new DateTime(2021, 6, 6, 11, 53, 7, 699, DateTimeKind.Local).AddTicks(5700),
                            Name = "<DEFAULT>"
                        });
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "680c60e2-efd5-40d1-ba1f-dd80d9c7c658",
                            ConcurrencyStamp = "43a1208f-c414-43a3-9814-c6849e4bcb65",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "e75b5512-8a56-4e51-89c0-bef9f134772a",
                            ConcurrencyStamp = "532da542-6a4f-45f2-9dea-c4e1ef21bbcb",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = "008338eb-3d6a-4d98-a4c0-e59b9c8db135",
                            ConcurrencyStamp = "2a468730-3890-4af0-8f23-b39b2f24b2bd",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FieldModel", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.Field", null)
                        .WithMany()
                        .HasForeignKey("ModelFieldsLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelLookupFieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReceiptTag", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppRole", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Category", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByCategories")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByCategories")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("TheStorageApp.API.Models.Receipt", null)
                        .WithMany("Categories")
                        .HasForeignKey("ReceiptId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Field", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByFields")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.Model", "Model")
                        .WithMany("Fields")
                        .HasForeignKey("ModelId");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByFields")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Model");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.LogEntry", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByLogEntries")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById1");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Model", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByModels")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByModels")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ModelRelationship", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByModelRelationships")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByModelRelationships")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("TheStorageApp.API.Models.Field", "RelatedField")
                        .WithMany("RelatedModelRelationships")
                        .HasForeignKey("RelatedModelId");

                    b.HasOne("TheStorageApp.API.Models.Model", "RelatedModel")
                        .WithMany("RelatedModelRelationships")
                        .HasForeignKey("RelatedModelId");

                    b.HasOne("TheStorageApp.API.Models.Field", "SourceField")
                        .WithMany("SourceModelRelationships")
                        .HasForeignKey("SorceModelId");

                    b.HasOne("TheStorageApp.API.Models.Model", "SorceModel")
                        .WithMany("SourceModelRelationships")
                        .HasForeignKey("SorceModelId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RelatedField");

                    b.Navigation("RelatedModel");

                    b.Navigation("SorceModel");

                    b.Navigation("SourceField");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByReceipts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByReceipts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ReceiptHolder")
                        .WithMany("Receipts")
                        .HasForeignKey("ReceiptHolderId");

                    b.HasOne("TheStorageApp.API.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReceiptHolder");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.ReceiptImage", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByReceiptImages")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.Receipt", "Receipt")
                        .WithMany("RecipetImages")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByReceiptImages")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Shop", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByShops")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByShops")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Tag", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedByTags")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TheStorageApp.API.Models.AppUser", "ModifiedBy")
                        .WithMany("ModifiedByTags")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.HasOne("TheStorageApp.API.Models.AppUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppUser", b =>
                {
                    b.Navigation("CreatedByCategories");

                    b.Navigation("CreatedByFields");

                    b.Navigation("CreatedByLogEntries");

                    b.Navigation("CreatedByModelRelationships");

                    b.Navigation("CreatedByModels");

                    b.Navigation("CreatedByReceiptImages");

                    b.Navigation("CreatedByReceipts");

                    b.Navigation("CreatedByShops");

                    b.Navigation("CreatedByTags");

                    b.Navigation("ModifiedByCategories");

                    b.Navigation("ModifiedByFields");

                    b.Navigation("ModifiedByModelRelationships");

                    b.Navigation("ModifiedByModels");

                    b.Navigation("ModifiedByReceiptImages");

                    b.Navigation("ModifiedByReceipts");

                    b.Navigation("ModifiedByShops");

                    b.Navigation("ModifiedByTags");

                    b.Navigation("Receipts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Field", b =>
                {
                    b.Navigation("RelatedModelRelationships");

                    b.Navigation("SourceModelRelationships");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Model", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("RelatedModelRelationships");

                    b.Navigation("SourceModelRelationships");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.Receipt", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("RecipetImages");
                });

            modelBuilder.Entity("TheStorageApp.API.Models.AppRole", b =>
                {
                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
