    @*
        Info:
        The Objective of the ListViewComponent is Create a listview that can take a KeyValuePair and Display a listview on the screen dynamically.
        The ListView requiers a ListViewViewModel whitch intern contains the following properties:
            -FiledHeaders
                -IsFieldFilterEnabled
                -AutoFillLastColumn
                -FieldHeaders
                    -Name
                    -Description
                    -Vizibility
                    -Index
                    -Width
            -ModelData
        Schema and Data are seperated in the Database.
        The Schema is a list of fields with user specific customizations:
                                                            -Vizibility
                                                            -Width
                                                            -Index
        Data is matched to the field when displayed.
        List view data is automaticaly sorted into their respective column indecies.


    Requierments:
        List of ListViewItems,
        SelectedIdex,
        SelectedItem,
        SelectedItems,

    Optional:
        SelectedRowColor,
        BackgroundRowColor,
        ForeGroundRowColor
        BackgroundHeaderColor,
        ForeGroundHeaderColor
*@

<table class="table table-hover">
    <thead>
        <tr>
            @foreach (var item in GetValueMetaData(typeof(Model)))
            {
                <td>@item</td>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            if (item.IsSelected)
            {
                <tr class="clickable-row bg-dark text-white" @onclick="(e) => OnRowClick(e, item)">
                    <ListViewItemComponent ModelObject="item.Item" IsSelected="item.IsSelected"></ListViewItemComponent>
                </tr>
            }
            else
            {
                <tr class="clickable-row" @onclick="(e) => OnRowClick(e, item)">
                    <ListViewItemComponent ModelObject="item.Item" IsSelected="item.IsSelected"></ListViewItemComponent>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<ListViewItem> Items { get; set; }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    private void OnRowClick(MouseEventArgs e, ListViewItem item)
    {
        if (e.AltKey || e.ShiftKey)
        {
            if (e.ShiftKey)
            {
                int startIndex = Items.IndexOf(Items.FirstOrDefault(x => x.IsSelected));
                int endIndex = Items.IndexOf(item);
                if (startIndex <= endIndex)
                {
                    SelectRange(startIndex, endIndex);
                }
                else
                {
                    SelectRange(endIndex + 1, startIndex + 1);
                }
            }
            ToggleSelect(item);
        }
        else
        {
            Select(item);
        }
    }

    public void SelectRange(int start, int end)
    {
        foreach (var item in Items)
        {
            item.IsSelected = false;
        }
        for (int i = start; i < end; i++)
        {
            Items[i].IsSelected = true;
        }
    }

    public void Select(ListViewItem model)
    {
        foreach (var item in Items)
        {
            item.IsSelected = false;
        }
        model.IsSelected = true;
    }

    public void ToggleSelect(ListViewItem item)
    {
        item.IsSelected = !item.IsSelected;
    }

    public string[] GetValueMetaData(Type type)
    {
        List<string> values = new List<string>();
        var properties = type.GetProperties();
        foreach (var property in properties)
        {
            var name = property.Name;
            values.Add(name);
        }
        return values.ToArray();
    }
}
