
    Requierments:
        List of ListViewItems,
        SelectedIdex,
        SelectedItem,
        SelectedItems,

    Optional:
        SelectedRowColor,
        BackgroundRowColor,
        ForeGroundRowColor
        BackgroundHeaderColor,
        ForeGroundHeaderColor

<table class="table table-hover">
    <thead>
        <tr>
            @foreach (var item in Items)
            {
                @if (item.IsVisible)
                {
                    <td>@item.ToString()</td>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            if (item.IsSelected)
            {
                @foreach (var field in ListViewItem.ItemFieldPropertyNames)
                {
                    <tr class="clickable-row bg-dark text-white" @onclick="(e) => OnRowClick(e, item)">
                        <td>@field.ToString()</td>
                    </tr>

                }
            }
            else
            {
                @foreach (var field in ListViewItem.ItemFieldPropertyNames)
                {
                    <tr class="clickable-row" @onclick="(e) => OnRowClick(e, item)">
                        <td>@field.ToString()</td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<ListViewItem> Items { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void OnRowClick(MouseEventArgs e, ListViewItem item)
    {
        if (e.AltKey || e.ShiftKey)
        {
            if (e.ShiftKey)
            {
                int startIndex = Items.IndexOf(Items.FirstOrDefault(x => x.IsSelected));
                int endIndex = Items.IndexOf(item);
                if (startIndex <= endIndex)
                {
                    SelectRange(startIndex, endIndex);
                }
                else
                {
                    SelectRange(endIndex + 1, startIndex + 1);
                }
            }
            ToggleSelect(item);
        }
        else
        {
            Select(item);
        }
    }

    public void SelectRange(int start, int end)
    {
        foreach (var item in Items)
        {
            item.IsSelected = false;
        }
        for (int i = start; i < end; i++)
        {
            Items[i].IsSelected = true;
        }
    }

    public void Select(ListViewItem model)
    {
        foreach (var item in Items)
        {
            item.IsSelected = false;
        }
        model.IsSelected = true;
    }

    public void ToggleSelect(ListViewItem item)
    {
        item.IsSelected = !item.IsSelected;
    }
}
