
@foreach (var item in ListViewItem.PropertyValueSet)
{
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Text)
    {
        <td>@item.Value.ValueAsString</td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Number)
    {
        <td>@item.Value.ValueAsDecimal.ToString()</td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Money)
    {
        <td>@item.Value.ValueAsString</td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Color)
    {
        <td><ColorPicker Title="Primary" MyColor="@item.Value.ValueAsColorString"></ColorPicker></td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Image)
    {
        <td><img src="data:image;base64,@System.Convert.ToBase64String(item.Value.ValueAsImage)" /></td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Integer)
    {
        <td>@item.Value.ValueAsInteger.ToString()</td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.DateTime)
    {
        <td>@item.Value.ValueAsDateTime.ToShortDateString()</td>
    }
    if (item.Value.FieldDataType == ClassAttrinutes.FieldDataTypes.Bool)
    {
        <td>@item.Value.ValueAsBool.ToString()</td>
    }
}

@code {
    [Parameter]
    public bool IsSelected { get; set; } = false;

    [Parameter]
    public ListViewItem ListViewItem { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public ValueMetaData[] GetValueMetaData(object obj, string[] requestedProperties = null)
    {
        List<ValueMetaData> values = new List<ValueMetaData>();
        var properties = obj.GetType().GetProperties();
        foreach (var property in properties)
        {
            var name = property.Name;
            var value = property.GetValue(obj);
            values.Add(new ValueMetaData(name, property.PropertyType, property.GetValue(obj)));
        }
        return values.ToArray();
    }

    public class ValueMetaData
    {
        public string Name { get; set; }
        public Type PropertyType { get; }
        public object Value { get; }

        public ValueMetaData(string name, Type type, object value)
        {
            Name = name;
            PropertyType = type;
            Value = value;
        }
    }
}
