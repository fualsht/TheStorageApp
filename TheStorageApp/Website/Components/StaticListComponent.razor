<!--<h3>StaticListComponent</h3>-->
@* 
Acceps a list of models inherited from IModel.
    Column Names come from a ViewTable
Renders a list of each model item in table form.
Handles Selection and appeariance of list Items.
*@
<!--<table class="table table-hover">
    <thead>
        <tr>
            @foreach (var field in DataObject.ModelViewModel)
            {
                @if (field.IsVizibile)
                {
                    <td>@field.FieldName</td>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DataObject.ModelViewModel)
        {
            if (item.IsSelected)
            {
                @foreach (var field in DataObject)
                {
                    <tr class="clickable-row bg-dark text-white" @onclick="(e) => OnRowClick(e, item)">
                        <td>@field.ToString()</td>
                    </tr>

                }
            }
            else
            {
                @foreach (var field in DataObject)
                {
                    <tr class="clickable-row" @onclick="(e) => OnRowClick(e, item)">
                        <td>@field.ToString()</td>
                    </tr>
                }
            }
        }
        </tbody>
</table>

@code {
    [Parameter]
    public List<IModel> Source { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void OnRowClick(MouseEventArgs e, IModel model)
    {
        if (e.AltKey || e.ShiftKey)
        {
            if (e.ShiftKey)
            {
                int startIndex = DataObject.IndexOf(DataObject.FirstOrDefault(x => x.IsSelected));
                int endIndex = DataObject.IndexOf(model);
                if (startIndex <= endIndex)
                {
                    SelectRange(startIndex, endIndex);
                }
                else
                {
                    SelectRange(endIndex + 1, startIndex + 1);
                }
            }
            ToggleSelect(model);
        }
        else
        {
            Select(model);
        }
    }

    public void SelectRange(int start, int end)
    {
        foreach (var item in DataObject)
        {
            item.IsSelected = false;
        }
        for (int i = start; i < end; i++)
        {
            DataObject[i].IsSelected = true;
        }
    }

    public void Select(IModel model)
    {
        foreach (var item in DataObject)
        {
            item.IsSelected = false;
        }
        model.IsSelected = true;
    }

    public void ToggleSelect(IModel model)
    {
        model.IsSelected = !model.IsSelected;
    }
}-->
