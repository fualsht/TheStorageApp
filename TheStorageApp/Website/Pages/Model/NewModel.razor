@page "/NewModel"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject ModelService _modelService
@inject AuthorizationController _authorizationController

<div>
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header text-secondary">
                    <h3>New Model</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="row mb-3">
                            <label for="nameField" class="col-sm-3 col-form-label">Name</label>
                            <div class="col-sm-9">
                                <input class="form-control" id="nameField" @bind="_model.Name">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="row mb-3">
                            <label for="pluralNameField" class="col-sm-3 col-form-label">Plural Name</label>
                            <div class="col-sm-9">
                                <input class="form-control" id="pluralNameField" @bind="_model.PluralName">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="row mb-3">
                            <label for="PrimaryColorInput" class="col-sm-3 col-form-label">Primary Color</label>
                            <div class="col-sm-9">
                                <button id="PrimaryColorInput" class="btn btn-primary" @onclick="() => OpenModal()" style="width:100%; height:100%; background-color:@_model.PrimaryColor" />
                                <ColorPicker Title="Primary" IsOpened="isPrimaryOpened" Closed="(val) => ClosedEvent(val)" MyColor="@_model.PrimaryColor"></ColorPicker>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="row mb-3">
                            <label for="SecondaryColorInput" class="col-sm-3 col-form-label">Secondary Color</label>
                            <div class="col-sm-9">
                                <button id="SecondaryColorInput" class="btn btn-primary" @onclick="() => OpenModal(true)" style="width:100%; height:100%; background-color:@_model.SecondaryColor" />
                                <ColorPicker Title="Secondary" IsOpened="isSecondaryOpened" Closed="(val) => ClosedEvent(val, true)" MyColor="@_model.SecondaryColor"></ColorPicker>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="row mb-3">
                            <label for="SecondaryColorInput" class="col-sm-3 col-form-label">Description</label>
                            <div class="col-sm-9">
                                <textarea class="form-control" aria-label="With textarea">@_model.Description</textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-header text-secondary">
                    <h3>Fields</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <table class="table table-hover">
                            <tr>
                                <th>
                                    Name
                                </th>
                                <th>
                                    Description
                                </th>
                                <th>
                                    DataType
                                </th>
                                <th>
                                    Unique
                                </th>
                                <th>
                                    Requiered
                                </th>
                                <th>
                                    Model
                                </th>
                                <th>
                                    MinSize
                                </th>
                                <th>
                                    MaxSize
                                </th>
                            </tr>
                            @*@foreach (Field item in _model.Fields)
                            {
                                @if (item.IsSelected)
                                {
                                    <tr class="clickable-row bg-dark text-white" @onclick="(e) => OnRowClick(e, item)">
                                        <td>@item.Name</td>
                                        <td>@item.Description</td>
                                        <td>@item.DataType</td>
                                        <td>@item.Unique</td>
                                        <td>@item.Requiered</td>
                                        <td>@item.Model</td>
                                        <td>@item.MinSize</td>
                                        <td>@item.MaxSize</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr class="clickable-row" @onclick="(e) => OnRowClick(e, item)">
                                        <td>@item.Name</td>
                                        <td>@item.Description</td>
                                        <td>@item.DataType</td>
                                        <td>@item.Unique</td>
                                        <td>@item.Requiered</td>
                                        <td>@item.Model</td>
                                        <td>@item.MinSize</td>
                                        <td>@item.MaxSize</td>
                                    </tr>
                                }
                            }*@
                        </table>
                        <button type="button" class="btn btn-primary" @onclick="(e) => SaveModelAsync(e)">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">

        </div>
    </div>
</div>

@code {
    public Model _model { get; set; }
    protected override Task OnInitializedAsync()
    {
        string userId = _authorizationController.GetUserClaim(JWTUserClaims.UserId);
        _model = _modelService.NewModel(userId);
        return base.OnInitializedAsync();
    }

    bool isPrimaryOpened = false;
    bool isSecondaryOpened = false;

    void OpenModal(bool openSecondary = false)
    {
        if (openSecondary)
        {
            isSecondaryOpened = true;
        }
        else
        {
            isPrimaryOpened = true;
        }
    }

    void ClosedEvent(string value, bool setSecondary = false)
    {
        if (setSecondary)
        {
            _model.SecondaryColor = value;
            isSecondaryOpened = false;
        }
        else
        {
            _model.PrimaryColor = value;
            isPrimaryOpened = false;
        }
    }

    private void OnRowClick(MouseEventArgs e, Field item)
    {
        //if (e.AltKey || e.ShiftKey)
        //{
        //    if (e.ShiftKey)
        //    {
        //        int startIndex = _model.Fields.ToList().IndexOf(_model.Fields.FirstOrDefault(x => x.IsSelected));
        //        int endIndex = _model.Fields.ToList().IndexOf(item);
        //        if (startIndex <= endIndex)
        //        {
        //            //_roleService.SelectRange(startIndex, endIndex);
        //        }
        //        else
        //        {
        //            //_roleService.SelectRange(endIndex + 1, startIndex + 1);
        //        }
        //    }
        //    //_roleService.ToggleSelect(role);
        //}
        //else
        //{
        //    //_roleService.Select(role);
        //}
    }

    private async Task SaveModelAsync(MouseEventArgs e)
    {
        await _modelService.AddModelAsync(_model);
    }

}