@page "/Models"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject ModelService _modelService
@inject AuthorizationController _authorizationController

@if (_modelService == null || listView == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_authorizationController.IsInRole("adminrole"))
    {
        <div class="col">
            <div class="card mt-md-4">
                <div class="card-header text-secondary">
                    <h3>Models</h3>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <ListViewComponent Items="listView.Items" ObjectType="typeof(Model)"></ListViewComponent>

                        <button class="btn btn-primary" @onclick="NewModel">New</button>
                        <button class="btn btn-primary" @onclick="() => EditFistSelectedModel()">Edit</button>
                        <button class="btn btn-primary" @onclick="DeleteSeletedModels">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    ListView listView { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var items = await _modelService.GetModelsAsync();
        listView = new ListView("Models", items);

        await base.OnInitializedAsync();
    }

    private void NewModel()
    {
        _navigationManager.NavigateTo("NewModel");
    }

    public void EditFistSelectedModel()
    {
        var f = listView.Items.FirstOrDefault(x => x.IsSelected == true).Id;
        _navigationManager.NavigateTo("EditModel/" + f);
    }

    private async Task DeleteSeletedModels()
    {
        List<Model> _models = new List<Model>();
        foreach (var item in listView.Items.Where(x => x.IsSelected))
        {
            _models.Add((Model)item.Item);

        }
        await _modelService.DeleteModelsAsync(_models.ToArray());
    }
}
