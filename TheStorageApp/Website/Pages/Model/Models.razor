@page "/Models"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject ModelService _modelService
@inject AuthorizationController _authorizationController

<h3>Models</h3>

@if (_modelService == null || _modelService.Models == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_authorizationController.IsInRole("adminrole"))
    {
        <ListViewComponent Items="Items"></ListViewComponent>

        <button class="btn btn-primary" @onclick="NewModel">New</button>
        <button class="btn btn-primary" @onclick="() => EditFistSelectedUser()">Edit</button>
        <button class="btn btn-primary" @onclick="DeleteSeletedUsers">Delete</button>
    }


}

@code {
    List<ListViewItem> Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _modelService.GetModelsAsync();
        Items = AsListViewItemList<Model>(_modelService.Models);
        //if (_modelService.Models.Count() > 0)
        //{
        //    _modelService.Models[0].IsSelected = true;
        //}

        await base.OnInitializedAsync();
    }

    private List<ListViewItem> AsListViewItemList<T>(List<T> obj)
    {
        List<ListViewItem> lvi = new List<ListViewItem>();

        foreach (var item in obj)
        {
            lvi.Add(new ListViewItem(item));
        }

        return lvi;
    }

    private void NewModel()
    {
        _navigationManager.NavigateTo("NewModel");
    }

    private void OnRowClick(MouseEventArgs e, Model model)
    {
        if (e.AltKey || e.ShiftKey)
        {
            if (e.ShiftKey)
            {
                int startIndex = _modelService.Models.ToList().IndexOf(_modelService.Models.FirstOrDefault(x => x.IsSelected));
                int endIndex = _modelService.Models.ToList().IndexOf(model);
                if (startIndex <= endIndex)
                {
                    _modelService.SelectRange(startIndex, endIndex);
                }
                else
                {
                    _modelService.SelectRange(endIndex + 1, startIndex + 1);
                }
            }
            _modelService.ToggleSelect(model);
        }
        else
        {
            _modelService.Select(model);
        }
    }

    public void EditFistSelectedUser()
    {
        _navigationManager.NavigateTo("EditUser");
    }

    private async Task DeleteSeletedUsers()
    {
        //await _modelService.DeleteModelsAsync();
        //_navigationManager.NavigateTo("Models");
    }
}
