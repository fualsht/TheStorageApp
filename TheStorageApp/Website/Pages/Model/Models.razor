@page "/Models"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject ModelService _modelService
@inject AuthorizationController _authorizationController

<h3>Models</h3>

@if (_modelService == null || _modelService.Models == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_authorizationController.IsInRole("adminrole"))
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Primary Color</th>
                    <th>Secondary Color</th>
                    <th>Name</th>
                    <th>Plural Name</th>
                    <th>Description</th>
                    <td>Created On</td>
                    <th>Created By</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in _modelService.Models)
                {
                    if (model.IsSelected)
                    {
                        <tr class="clickable-row bg-dark text-white" @onclick="(e) => OnRowClick(e, model)">
                            <td>
                                <div class="media">
                                    <div class="mr-3" style="background-color: #@model.PrimaryColor; width:auto; height:inherit" >
                                        @model.PrimaryColor;
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="media">
                                    <div class="mr-3" style="background-color: #@model.SecondaryColor; width:auto; height:inherit" >
                                        @model.SecondaryColor;
                                    </div>
                                </div>
                            </td>
                            <td>@model.Name</td>
                            <td>@model.PluralName</td>
                            <td>@model.Description</td>
                            @*<td>@model.CreatedOn</td>
                            <td>@model.CreatedBy.FirstName @model.CreatedBy.LastName</td>*@
                        </tr>
                    }
                    else
                    {
                        <tr class="clickable-row" @onclick="(e) => OnRowClick(e, model)">
                            <td>
                                <div class="media">
                                    <div class="mr-3" style="background-color: #@model.PrimaryColor; width:auto; height:inherit">
                                        @model.PrimaryColor;
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="media">
                                    <div class="mr-3" style="background-color: #@model.SecondaryColor; width:auto; height:inherit" >
                                        @model.SecondaryColor;
                                    </div>
                                </div>
                            </td>
                            <td>@model.Name</td>
                            <td>@model.PluralName</td>
                            <td>@model.Description</td>
                            @*<td>@model.CreatedOn</td>
                            <td>@model.CreatedBy.FirstName @model.CreatedBy.LastName</td>*@
                        </tr>
                    }

                }
            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="NewModel">New</button>
        <button class="btn btn-primary" @onclick="() => EditFistSelectedUser()">Edit</button>
        <button class="btn btn-primary" @onclick="DeleteSeletedUsers">Delete</button>
    }


}

@code {

    protected override async Task OnInitializedAsync()
    {
        await _modelService.GetModelsAsync();
        if (_modelService.Models.Count() > 0)
        {
            _modelService.Models[0].IsSelected = true;
        }
        await base.OnInitializedAsync();
    }

    private void NewModel()
    {
        _navigationManager.NavigateTo("NewModel");
    }

    private void OnRowClick(MouseEventArgs e, Model model)
    {
        if (e.AltKey || e.ShiftKey)
        {
            if (e.ShiftKey)
            {
                int startIndex = _modelService.Models.ToList().IndexOf(_modelService.Models.FirstOrDefault(x => x.IsSelected));
                int endIndex = _modelService.Models.ToList().IndexOf(model);
                if (startIndex <= endIndex)
                {
                    _modelService.SelectRange(startIndex, endIndex);
                }
                else
                {
                    _modelService.SelectRange(endIndex + 1, startIndex + 1);
                }
            }
            _modelService.ToggleSelect(model);
        }
        else
        {
            _modelService.Select(model);
        }
    }

    public void EditFistSelectedUser()
    {
        _navigationManager.NavigateTo("EditUser");
    }

    private async Task DeleteSeletedUsers()
    {
        //await _modelService.DeleteModelsAsync();
        //_navigationManager.NavigateTo("Models");
    }
}
