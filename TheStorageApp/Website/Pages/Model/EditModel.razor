@page "/EditModel/{Id}"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager
@inject ModelService _modelService
@inject AuthorizationController _authorizationController

@using TheStorageApp.Website.Pages.Field
@using TheStorageApp.Website.Pages.View

@if (TabCollection == null)
{
    <div>Loading...</div>
}
else
{
    <TabControlComponent TabCollection="TabCollection" OnTabSelectCallBack="OnTabClick"></TabControlComponent>
    <div>
        @if (element.Name == "General")
        {
            <ModelEditor ModelItem="ModelItem"></ModelEditor>
        }
        else if (element.Name == "Fields")
        {
            <FieldsEditor Fields="ModelItem.Fields.ToList()"></FieldsEditor>
        }
        else
        {
            <ViewEditor></ViewEditor>
        }
    </div>
}

@code {
    public TabControlCollection TabCollection { get; set; } = new TabControlCollection();
    public UiElement element { get; set; }

    [Parameter]
    public string Id { get; set; } = "";

    public Model ModelItem { get; set; }

    ListViewComponentBase listView;

    protected async override Task OnInitializedAsync()
    {
        ModelItem = new Model();
        TabCollection.Add("General", true, null);
        TabCollection.Add("Fields", false, null);
        TabCollection.Add("Views", false, null);
        element = TabCollection.FirstOrDefault();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    await Refresh();
        //}
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Refresh()
    {
        ModelItem = await _modelService.GetModelAsync(Id);
        listView.LoadItems<Field>(ModelItem.Fields.ToArray());
        this.StateHasChanged();
    }

    bool isPrimaryOpened = false;
    bool isSecondaryOpened = false;

    void OpenModal(bool openSecondary = false)
    {
        if (openSecondary)
        {
            isSecondaryOpened = true;
        }
        else
        {
            isPrimaryOpened = true;
        }
    }

    void ClosedEvent(string value, bool setSecondary = false)
    {
        if (setSecondary)
        {
            ModelItem.SecondaryColor = value;
            isSecondaryOpened = false;
        }
        else
        {
            ModelItem.PrimaryColor = value;
            isPrimaryOpened = false;
        }
    }

    private async Task SaveModelAsync(MouseEventArgs e)
    {
        await _modelService.UpdateModelAsync(ModelItem);
        _navigationManager.NavigateTo("models");
    }

    private void OnNewFieldClick()
    {
        _navigationManager.NavigateTo($"NewField/{ModelItem.Id}");
    }
    private void OnEditFieldClick()
    {

    }
    private void OnDeleteFieldClick()
    {

    }

    private void OnTabClick(TabSelectEventArgs eventArgs)
    {
        element = eventArgs.SelectedItem;
    }
}
